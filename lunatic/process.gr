import WasmI32 from "runtime/unsafe/wasmi32"
import WasmI64 from "runtime/unsafe/wasmi64"
import Memory from "runtime/unsafe/memory"
import DataStructures from "runtime/dataStructures"
import Tags from "runtime/unsafe/tags"

import Array from "array"
import Bytes from "bytes"
import Int64 from "int64"
import Marshal from "marshal"
import Result from "result"

import foreign wasm create_config: () -> WasmI64 as createConfig from "lunatic::process"

import foreign wasm drop_config: WasmI64 -> Void as dropConfig from "lunatic::process"

import foreign wasm allow_namespace: (
  WasmI64,
  WasmI32,
  WasmI32,
) -> WasmI32 as allowNamespace from "lunatic::process"

import foreign wasm preopen_dir: (
  WasmI64,
  WasmI32,
  WasmI32,
  WasmI32,
) -> WasmI32 as preopenDir from "lunatic::process"

import foreign wasm create_environment: (
  WasmI64,
  WasmI32,
) -> WasmI32 as createEnvironment from "lunatic::process"

import foreign wasm create_remote_environment: (
  WasmI64,
  WasmI32,
  WasmI32,
  WasmI32,
) -> WasmI32 as createRemoteEnvironment from "lunatic::process"

import foreign wasm drop_environment: WasmI64 -> Void as dropEnvironment from "lunatic::process"

import foreign wasm add_plugin: (
  WasmI64,
  WasmI32,
  WasmI32,
  WasmI32,
) -> WasmI32 as addPlugin from "lunatic::process"

import foreign wasm add_module: (
  WasmI64,
  WasmI32,
  WasmI32,
  WasmI32,
) -> WasmI32 as addModule from "lunatic::process"

import foreign wasm add_this_module: (
  WasmI64,
  WasmI32,
) -> WasmI32 as addThisModule from "lunatic::process"

import foreign wasm drop_module: WasmI64 -> Void as dropModule from "lunatic::process"

import foreign wasm spawn: (
  WasmI64,
  WasmI64,
  WasmI64,
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
) -> WasmI32 as spawn from "lunatic::process"

import foreign wasm inherit_spawn: (
  WasmI64,
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
) -> WasmI32 as inheritSpawn from "lunatic::process"

import foreign wasm drop_process: WasmI64 -> Void as dropProcess from "lunatic::process"

import foreign wasm clone_process: WasmI64 -> WasmI64 as cloneProcess from "lunatic::process"

import foreign wasm sleep_ms: WasmI64 -> Void as sleepMs from "lunatic::process"

import foreign wasm die_when_link_dies: WasmI32 -> Void as dieWhenLinkDies from "lunatic::process"

import foreign wasm this: () -> WasmI64 as this from "lunatic::process"

import foreign wasm id: (WasmI64, WasmI32) -> Void as id from "lunatic::process"

import foreign wasm this_env: () -> WasmI64 as thisEnv from "lunatic::process"

import foreign wasm link: (
  WasmI64,
  WasmI64,
) -> Void as link from "lunatic::process"

import foreign wasm unlink: WasmI64 -> Void as unlink from "lunatic::process"

import foreign wasm register: (
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI64,
  WasmI64,
) -> WasmI32 as register from "lunatic::process"

import foreign wasm unregister: (
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI64,
) -> WasmI32 as unregister from "lunatic::process"

import foreign wasm lookup: (
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
) -> WasmI32 as lookup from "lunatic::process"

import foreign wasm create_data: (
  WasmI64,
  WasmI64,
) -> Void as createData from "lunatic::message"
import foreign wasm write_data: (
  WasmI32,
  WasmI32,
) -> WasmI32 as writeData from "lunatic::message"
import foreign wasm read_data: (
  WasmI32,
  WasmI32,
) -> WasmI32 as readData from "lunatic::message"
import foreign wasm seek_data: WasmI64 -> Void as seekData from "lunatic::message"
import foreign wasm get_tag: () -> WasmI64 as getTag from "lunatic::message"
import foreign wasm data_size: () -> WasmI64 as dataSize from "lunatic::message"
import foreign wasm send: WasmI64 -> Void from "lunatic::message"
import foreign wasm receive: (
  WasmI32,
  WasmI32,
  WasmI32,
) -> WasmI32 from "lunatic::message"

type Process = Int64
export exception ReceiveTimeout
export exception MarshalError(String)

type Mailbox<a> = Int64

/* Tags 0 - 127 are reserved for special purposes. */

@unsafe
let mut currentTag = 128N

let bootstrapMailbox: Mailbox<() -> Void> = 1L

@unsafe
export let createMailbox = () => {
  let tag = currentTag
  currentTag = WasmI64.add(currentTag, 1N)
  WasmI32.toGrain(DataStructures.newInt64(tag)): Mailbox<a>
}

@unsafe
let createData = (tag: Int64, capacity: Int64) => {
  createData(
    WasmI64.load(WasmI32.fromGrain(tag), 8n),
    WasmI64.load(WasmI32.fromGrain(capacity), 8n)
  )
}

@unsafe
let writeData = (bytes: Bytes) => {
  let bytesPtr = WasmI32.fromGrain(bytes)
  let bytesWritten = writeData(
    WasmI32.add(bytesPtr, 8n),
    WasmI32.load(bytesPtr, 4n)
  )
  WasmI32.toGrain(DataStructures.newInt32(bytesWritten)): Int32
}

@unsafe
let readData = (bytes: Bytes) => {
  let bytesPtr = WasmI32.fromGrain(bytes)
  let bytesRead = readData(
    WasmI32.add(bytesPtr, 8n),
    WasmI32.load(bytesPtr, 4n)
  )
  WasmI32.toGrain(DataStructures.newInt32(bytesRead)): Int32
}

@unsafe
let seekData = (position: Int64) => {
  seekData(WasmI64.load(WasmI32.fromGrain(position), 8n))
}

@unsafe
let getTag = () => {
  WasmI32.toGrain(DataStructures.newInt64(getTag())): Int64
}

@unsafe
let dataSize = () => {
  WasmI32.toGrain(DataStructures.newInt64(dataSize())): Int64
}

@unsafe
let send = (pid: Process) => {
  send(WasmI64.load(WasmI32.fromGrain(pid), 8n))
}

@unsafe
let receive = (tags: Option<List<Int64>>, timeout: Int32) => {
  let tags = match (tags) {
    Some(tags) => Array.fromList(tags),
    None => [>],
  }

  let count = DataStructures.untagSimpleNumber(Array.length(tags))

  let tagsBuf = Memory.malloc(WasmI32.mul(count, 8n))

  for (let mut i = 0n; WasmI32.ltU(i, count); i = WasmI32.add(i, 1n)) {
    WasmI64.store(
      tagsBuf,
      WasmI64.load(
        WasmI32.fromGrain(tags[DataStructures.tagSimpleNumber(i)]),
        8n
      ),
      WasmI32.mul(i, 8n)
    )
  }

  let result = receive(
    tagsBuf,
    count,
    WasmI32.load(WasmI32.fromGrain(timeout), 8n)
  )

  match (result) {
    0n => {
      Ok(void)
    },
    9027n => Err(ReceiveTimeout),
    1n => fail "can't recieve link failed message",
    _ => fail "unknown receive error",
  }
}

@unsafe
let idPtr = Memory.malloc(8n)

/**
 * Cause the current process to sleep for the given number of milliseconds.
 * 
 * @param ms: The number of milliseconds to sleep
 */
@unsafe
export let sleep = (ms: Int64) => {
  let ms = WasmI64.load(WasmI32.fromGrain(ms), 8n)
  sleepMs(ms)
}

@unsafe
export let this = () => {
  WasmI32.toGrain(DataStructures.newInt64(this())): Process
}

@unsafe
export let uuid = (pid: Int64) => {
  let uuid = DataStructures.allocateString(16n)
  id(WasmI64.load(WasmI32.fromGrain(pid), 8n), WasmI32.add(uuid, 8n))
  WasmI32.toGrain(uuid): String
}

export let send: (Process, a, Mailbox<a>) -> Void =
  (
    process,
    data,
    mailbox,
  ) => {
  let payload = Marshal.marshal(data)
  createData(mailbox, Int64.fromNumber(Bytes.length(payload)))
  writeData(payload)
  send(process)
}

export let receiveTimeout: (Int32, Mailbox<a>) -> Result<a, Exception> =
  (
    timeout,
    mailbox,
  ) => {
  Result.flatMap((_) => {
    let size = dataSize()
    let buf = Bytes.make(Int64.toNumber(size))
    readData(buf)
    Result.mapErr(msg => MarshalError(msg), Marshal.unmarshal(buf))
  }, receive(Some([mailbox]), timeout))
}

export let receive = mailbox => {
  receiveTimeout(0l, mailbox)
}

@unsafe
export let spawn = (func: () -> Void) => {
  let funcName = WasmI32.fromGrain("__lunatic_bootstrap")

  let result = spawn(
    0N,
    -1N,
    -1N,
    WasmI32.add(funcName, 8n),
    WasmI32.load(funcName, 4n),
    0n,
    0n,
    idPtr
  )

  let spawnId = WasmI32.toGrain(
    DataStructures.newInt64(WasmI64.load(idPtr, 0n))
  )

  if (WasmI32.eqz(result)) {
    let process = spawnId: Process
    send(process, func, bootstrapMailbox)

    Ok(process)
  } else {
    Err(spawnId: Int64)
  }
}

@unsafe
export let __lunatic_bootstrap = () => {
  // The mailbox type is not propagated within this module for some reason so
  // we use an explicit type annotation.
  // https://github.com/grain-lang/grain/issues/1356
  let result: Result<() -> Void, Exception> = receive(bootstrapMailbox)
  match (result) {
    Ok(func) => func(),
    Err(ReceiveTimeout) => fail "didn't receive bootstrap message",
    Err(MarshalError(_)) => fail "corrupted bootsrap message",
    Err(_) => fail "unknown error",
  }
}
